
auth_server : 
models.py

class User(JsonSerializable):
    def __init__(self, user_name, password, email, tenant_id, user_id=None, name=None, full_name=None, v=None, super_user=False, data=None, user_status_flag=1, sendSetPasswordEmail=False):
        self.id = user_id
        self.name = name
        self.full_name = full_name
        self.user_name = user_name
        self.password = password
        self.tenant_id = tenant_id
        self.email = email
        self.super_user = super_user
        self.user_status_flag = user_status_flag
        self.user_data = data
        self.sendSetPasswordEmail = sendSetPasswordEmail
        
-----------------------------------------------------------        
 user_manager.py

 def upsert_user(self, user: User, application_id=None):
        if hasattr(user, 'data'):
            user = user.data
        user_dict = to_fusion_user(user)
        pay_load = json.dumps(user_dict)
        if user_dict["user"]["id"] is not None:
            resp = requests.put(self.auth_url + USER_API_URL + "/" + user_dict["user"]["id"], data=pay_load,
                                headers={'Authorization': self.auth_api_key, 'Content-Type': 'application/json',
                                         'X-FusionAuth-TenantId': user.tenant_id})
        else:
            resp = requests.post(self.auth_url + USER_API_URL, data=pay_load,
                                 headers={'Authorization': self.auth_api_key, 'Content-Type': 'application/json',
                                          'X-FusionAuth-TenantId': user.tenant_id})
        if resp.status_code == 200 or resp.status_code == 202:
            data_dict = resp.json()
            u = data_dict["user"]

            if application_id is not None:
                reg_manager_obj = RegistrationManager(self.auth_url, self.auth_api_key)
                reg_manager_obj.register_user(application_id, u["id"])       

-------------------------------------------------------
utils.py

def to_fusion_user(user:User):
    if hasattr(user,'data'):
        user = user.data
    user_obj =  {
        "user": {
            "active": True,
            "passwordChangeRequired": False,
            "twoFactorDelivery": "None",
            "twoFactorEnabled": False,
            "fullName": user.full_name,
            "username": user.user_name,
            "usernameStatus": "ACTIVE",
            "verified": True,
            "email": user.email,
            "password": user.password,
            "tenantId": user.tenant_id,
            "id": user.id,
            "user_status_flag": user.user_status_flag,
            "data": {
                "superUser": user.super_user
            }
        },
        "sendSetPasswordEmail":user.sendSetPasswordEmail
    }
    if user.user_data is not None and isinstance(user.user_data, dict):
        extra_data = user_obj["user"]["data"]
        for key, val in user.user_data.items():
            # ommit superUser
            if key != "superUser":
                extra_data[key] = json.dumps(val) if val is not None else None
    elif user.user_data is not None:
        raise ValueError("only dicts for user data supported")
    return user_obj
                 
------------------------------------------------------------
application.py
      
@app_routes.route('/name/<app_name>/tenant-id/<tenant_id>', methods=['GET'])
@app_routes.response(ApplicationSchema(many=True), code=200)
def get_application_by_name(app_name, tenant_id):
    app_manager = ApplicationManager(AUTH_HOST_INTERNAL, AUTH_API_KEY)
    application  = app_manager.get_application_by_name(tenant_id, app_name)
    return [application]

------------------------------------------------------------
      
user.py 

@user_routes.route('<tenant_id>', methods=['POST','PUT'])
def upsert_user(tenant_id):
    user_manager = UserManager(AUTH_HOST_INTERNAL, AUTH_API_KEY)
    json_data = request.get_json(force=True)
    query_params = request.args

    if query_params.get('change_password').lower() == "true":
        if json_data.get('email') != None:
            json_data['sendSetPasswordEmail'] = True
        else:
            return jsonify({"error" : "user email needed if 'change_password' is true"}),500
    else:
        json_data['sendSetPasswordEmail'] = False

    app_id = json_data.get('application_id')
    if query_params.get('application_id') != 'None':
        app_id = query_params.get('application_id')


    json_data.pop('application_id')
    user = UserSchema().load(json_data)
    inserted_user = user_manager.upsert_user(user, application_id=app_id)
    return inserted_user.to_dict()


----------------------------------------
schemas.py

class UserSchema(ma.Schema):
    class Meta:
        strict = True
        ordered = True

    user_id = ma.fields.String(load_from="id", dump_to="id", default=None, required=False, allow_none=True)
    full_name = ma.fields.String(required=True)
    user_name = ma.fields.String(required=True)
    password = ma.fields.String(required=True)
    tenant_id = ma.fields.String(required=True)
    email = ma.fields.String(required=False, allow_none=True)
    super_user = ma.fields.Boolean(required=False)
    name = ma.fields.String(required=False)
    user_status_flag = ma.fields.Raw(required=False)
    data = ma.fields.Raw(load_from="user_data", dump_to="user_data", required=False,allow_none=True)
    sendSetPasswordEmail = ma.fields.Boolean(required=False)

---------------------------------
      WOE project:
register user removed part 

def _get_auth_server_register_client(self):
        auth_server_register_client = AuthServerRegisterClient(rest_client=self.rest_client, tenant_id=self.tenant_id)
        return auth_server_register_client



----------------------------------------
          
          sdks project:
register.py

from ai.timeli.utils.rest_client import *

class AuthServerRegisterClient:
    def __init__(self, token_response=None, rest_client=None, tenant_id=None):
        if rest_client is None:
            self.rc = RestClient(token_response, tenant_id=tenant_id, base_url=UrlHolder.resource_url)
        else:
            self.rc = rest_client
            self.rc.set_tenant_id(tenant_id)


    def register_user(self, app_id, user_id, roles):
        tenant_id = self.rc.get_tenant_id()
        url = 'api/auth/application/register/{}/{}/{}/{}'.format(tenant_id, app_id, user_id, roles)
        return self.rc.doPut(url)
-----------------------------------------
applications.py

    def get_application_by_name(self, tenant_id, app_name):
        return  self.rc.doGet('/api/auth/tenant/application/name/{}/tenant-id/{}'.format(app_name, tenant_id))
        
users.py
    def upsert_user(self,attr_vals, change_password=False, application_id=None):
        tenant_id = self.rc.get_tenant_id()
        url = 'api/auth/tenant/user/{}?change_password={}&&application_id={}'.format(tenant_id, change_password, application_id)
        return self.rc.doPut(url, body=attr_vals.toDict())



